{
    "contents" : "#' scalenet\n#'\n#' scalenet reconstruct network from local prediction based on subset of variables selected\n#' with different clustering methods. The default subset selection correspond to the core\n#' scaleNet approach. The other subset selection methods are left for comparison.\n#'\n#' @param argInData input data file, a tab separated file with features in columns and observations in rows\n#' @param argOutDir output directory file, will be created\n#' @param argEigenPerc percentage of eigen vectors to use,\n#' if -1 this percentage is set with an internal elbow-like heuristic method\n#' @param argSubsetType variable subset selection, subset of variables can be selected from:\n#' (1) eigen vector elements (\"spectral\"), (2) spectral k-means clusters (\"spectralKmeans\"),\n#' (3) spectral fuzzy c-means clusters (\"spectralFuzzyCmeansOrder\" or \"spectralFuzzyCmeansSample\")\n#' (4) spectral bipartition clusters (\"spectralBipartition\" )\n#' @param argReconsMeth reconstruction method, (1) bayesian hill climbing (\"bayes_hc\"),\n#' (2) aracne (\"aracne\")\n#' @param argReconsParam reconstruction method parameters, (1) [bayes_hc] \"-s score -r restartNumber\",\n#' (2) [aracne] \"-p epsilon -w estimator\"\n#' @param argNbSamples number of observation to sample from the original dataset, if more than the\n#' original number of observations, the maximum number of available samples is considered\n#' @param argNumSeed random seed to sample observations from the original dataset\n#' @param argNbCPU number of CPU to be used for local recontructions\n#' @param argVerbose display details\n#'\n#' @export\n\n# scalenet(argInData = \"~/Projects/Projects_largeScale/data/benchmark/andes/input/rawData/andes_20000/andes_20000_0001.txt\",\n#          argOutDir = \"~/Projects/Projects_largeScale/data/benchmark/andes/output/test_pck_spectral\",\n#          argVarPerc = 0.2, argReconsMeth = \"aracne\", argReconsParam = list(aracne = list(estimator=\"mi.mm\", epsilon=0.001)),\n#          argSubsetType = \"spectral\", argPresFreqThresh = c(0.3, 0.8), argVerbose = TRUE)\n\n# scalenet(argInData = \"~/Projects/Projects_largeScale/data/benchmark/andes/input/rawData/andes_20000/andes_20000_0001.txt\",\n#          argOutDir = \"~/Projects/Projects_largeScale/data/benchmark/andes/output/test_pck_spectral\",\n#          argVarPerc = 0.2, argReconsMeth = \"bayes_hc\", argReconsParam = list(bayes_hc = list(score=\"bde\", restart=21)),\n#          argSubsetType = \"spectral\", argPresFreqThresh = c(0.3, 0.8), argVerbose = TRUE)\n\nscalenet <- function(argInData, argOutDir, argEigenPerc = -1, argVarPerc, argSubsetType = \"spectral\",\n                     argReconsMeth = \"bayes_hc\",\n                     argReconsParam = list(bayes_hc = list(score=\"bde\", restart=20)),\n                     argPresFreqThresh = c(0.5, 1), argNbSamples = 50000,\n                     argNumSeed = 6196, argNbCPU = 2, argVerbose = FALSE) {\n\n  # ----------------------------------------\n  # Initialize the global variables (subEnv variable)\n  # ----------------------------------------\n  # An environment variable to avoid passing big table to subfunctions\n  subEnv <- new.env()\n#   # --> Path to directory that containes reconstruction methods\n#   subEnv$reconsMeth.dirPath <- file.path(scaleNet.project.dirPath, \"analyses\", \"reconsMeth\")\n  # Load/Set variables\n  setEnvironment( inData = argInData, outDir = argOutDir, eigenPerc = argEigenPerc,\n                           varPerc = argVarPerc, subsetType = argSubsetType,\n                           reconsMeth = argReconsMeth, reconsParam = argReconsParam,\n                           presFreqThresh = argPresFreqThresh,\n                           nbSamples = argNbSamples, numSeed = argNumSeed, nbCPU = argNbCPU,\n                           verbose = argVerbose, ioSubEnv = subEnv )\n\n  # -----------------\n  #  Recall the main parameters\n  # -----------------\n  recallParameters(ioSubEnv = subEnv)\n\n  # ----------------------------------------\n  # Compute the LAPLACIAN MATRIX\n  # --> [decompose/mat] Lrw=D^-1.L=I-D^-1.W,\n  # --> where D=diag(di), di=sum(Coli),\n  # --> [affinity.mat] W = MIM\n  # ----------------------------------------\n  cat(\"\\n# Compute the normalized Laplacian, based on MIM...\\n\")\n  LaplacianRW(ioSubEnv = subEnv)\n\n  # ----------------------------------------\n  # Compute the eigenvectors/values\n  # ----------------------------------------\n  cat(\"\\n# Compute the eigen vectors / values...\\n\")\n  computeEigenVectVal(ioSubEnv = subEnv)\n\n  # ----------------------------------------\n  # Plot/Save the eigen vector element distribution\n  # ----------------------------------------\n  cat(\"\\n# Save the ordered eigen values...\\n\")\n  plotSaveEigenVal(ioSubEnv = subEnv)\n\n  if(subEnv$subset.select %in% c(\"spectral\", \"spectralKmeans\", \"spectralFuzzyCmeansOrder\", \"spectralFuzzyCmeansSample\")){\n\n    # Plot/save the ordered elements of the eigen vectors\n    cat(\"\\n# Save the ordered eigen vector element...\\n\")\n    plotSaveEigenVect(ioSubEnv = subEnv )\n  }\n\n  # ----------------------------------------\n  # Reconstruct all the subgraphs\n  # --> ie. two subgraphs per eigen vector\n  # ----| G+,m: the m variables corresponding to the m highest eigen vector elements\n  # ----| G-,m: the m variables corresponding to the m lowest eigen vector elements\n  # ----------------------------------------\n  cat(\"\\n# Reconstruct all the G+,m / G-,m subgraphs...\\n\")\n  # --> sub input datasets\n  createSubInputData(ioSubEnv = subEnv)\n  # --> output subgraphs\n  createSubOutputGraphs(ioSubEnv = subEnv)\n\n  # ----------------------------------------\n  # Gather the subgraphs\n  # ----------------------------------------\n  cat(\"\\n# Gather all the G+,m / G-,m or Gclust,m subgraphs...\\n\")\n\n  # In case of spectralFuzzyCmeansSample, cmeans.nbVarSample globalNet are generated\n  tmp.nbVarSamples <- ifelse((subEnv$cmeans.nbVarSample != -1), subEnv$cmeans.nbVarSample, 1)\n\n  # iVarSpl = 1\n  for(iVarSpl in seq_len(tmp.nbVarSamples)){\n    scaleNet.gatherSubGraphs(ioSubEnv = subEnv, iVarSpl = iVarSpl)\n  }\n\n  # ----------------------------------------\n  # Convert into a scalenet edgeList/adjMat\n  # ----------------------------------------\n  cat(\"\\n# Convert into a scaleNet edgeList...\\n\")\n\n  # In case of spectralFuzzyCmeansSample, cmeans.nbVarSample globalNet are generated\n  tmp.nbVarSamples <- ifelse((subEnv$cmeans.nbVarSample != -1), subEnv$cmeans.nbVarSample, 1)\n\n  # iVarSpl = 1\n  for(iVarSpl in seq_len(tmp.nbVarSamples)){\n    scaleNet.convertToScaleNetFormat(ioSubEnv = subEnv, iVarSpl = iVarSpl)\n  }\n\n\n}\n",
    "created" : 1470646418479.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4087870539",
    "id" : "96D08054",
    "lastKnownWriteTime" : 1469714289,
    "path" : "~/Projects/Projects_largeScale/package/ScaleNet_V1.2/R/scalenet.R",
    "project_path" : "R/scalenet.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}