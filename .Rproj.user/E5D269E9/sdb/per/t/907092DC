{
    "contents" : "#' rMethod.aracne\n#'\n#' rMethod.aracne reconstruct network using the aracne approach (from minet package)\n#'\n#' @param argInData input data file, a tab separated file with features in columns and observations in rows\n#' @param argOutDir output directory file, will be created\n#' @param argEstimator mutual information estimator\n#' @param argEpsilon constraint for third edge removal\n#' @param argVerbose display details\n#'\n#' @export\n\n# rMethod.aracne(argInData = \"~/Projects/Projects_largeScale/data/benchmark/andes/output/test_pck_spectral/subGraphs/subInput/eigenVector2_45neg.tsv\",\n#                 argOutDir = \"~/Projects/Projects_largeScale/data/benchmark/andes/output/test_pck_spectral/subGraphs/subOutput\",\n#                 argEstimator = \"mi.mm\", argEpsilon = 0, argVerbose = TRUE)\n\nrMethod.aracne <- function(argInData, argOutDir, argEstimator = \"mi.mm\", argEpsilon = 0, argVerbose = FALSE) {\n\n  if(argVerbose){cat( \"# --------\\n# -> START aracne ...\\n\" )}\n\n  #### Recall the main parameters\n  if(argVerbose){\n    cat( \"# --------\\n# Inputs:\\n# ----\\n\"\n         , \"# Input data file -->\", argInData, \"\\n\"\n         , \"# Output directory -->\", argOutDir, \"\\n\" )\n  }\n  # ----\n\n  #### Load the raw data file & Make sure all columns are factors, then convert to numeric\n  inputData.df <- read.table(file = argInData, header = TRUE, stringsAsFactor = FALSE, sep = \"\\t\")\n  inputData.df[, colnames(inputData.df)] <- as.data.frame(lapply(inputData.df[, colnames(inputData.df)] , factor))\n\n  # if the estimator is not \"mi.\", the input data should be numeric\n  if( length( grep( \"mi.\", argEstimator ) ) == 0 )\n  { inputData.df[, colnames(inputData.df)] <- as.data.frame(lapply(inputData.df[, colnames(inputData.df)] , as.numeric)) }\n\n  #### Recall the main parameters\n  if(argVerbose){\n    cat( \"# All properties -->\", paste( colnames(inputData.df), collapse = \", \" ), \"\\n\"\n         , \"# MI estimator type -->\", argEstimator, \"\\n\"\n         , \"# Eps -->\", argEpsilon, \"\\n\"\n         , \"# --------\\n\" )\n  }\n  # ----\n\n  #### Compute the MIM\n  myMIM <- minet::build.mim( inputData.df, argEstimator )\n\n  # Compute the weighted matrix\n  myNet = minet::aracne( myMIM, eps = argEpsilon )\n\n  #### Save the edges as an edges table and an adj mat\n  #### ----\n  gV <- new.env()\n  gV$allProperties <- colnames(inputData.df)\n\n  #### Compute the list of edges and their key\n  allPairs <- combn( colnames( inputData.df ), 2)\n  allKeys <- paste( allPairs[1,], allPairs[2,], sep = \"_<<_\"  )\n  rm(gV)\n\n  #### Insert the information into a data frame\n  myEdgesN = ncol(allPairs)\n  edgesInfo.df <- data.frame( x = character(myEdgesN), y = character(myEdgesN)\n                              , epresenceScore = rep(NA, myEdgesN), epresence = rep(0,myEdgesN)\n                              , eorientScore = rep(NA, myEdgesN), eorient = rep(0, myEdgesN)\n                              , ecorr = rep(NA,myEdgesN)\n                              , stringsAsFactors = FALSE )\n\n  edgesInfo.df[, \"x\"] = allPairs[1,]\n  edgesInfo.df[, \"y\"] = allPairs[2,]\n  for( iEdge in seq_len(myEdgesN) )\n  {\n    #### Copy from the mim mat\n    edgesInfo.df[iEdge, \"epresenceScore\"] = myNet[edgesInfo.df[iEdge, \"x\"],edgesInfo.df[iEdge, \"y\"]]\n  }\n  rownames(edgesInfo.df) = allKeys\n\n  #### Order the data frame\n  edgesInfo.df = edgesInfo.df[order(edgesInfo.df[, \"epresenceScore\"], decreasing = TRUE),]\n\n  #### Init the edges as phantom (0) and if the weight is > 0, set them as non phantom (1)\n  edgesInfo.df[, \"epresence\"] = 0\n  myInfEdges = which( edgesInfo.df[, \"epresenceScore\"] > 0 )\n  if( length( myInfEdges ) > 0 ){\n    edgesInfo.df[myInfEdges, \"epresence\"] = 1\n    edgesInfo.df[myInfEdges, \"eorient\"] = 1\n  }\n\n  #### Write the mutual information\n  if(!dir.exists(argOutDir)){dir.create(argOutDir)}\n  inferredEdgesFileName = \"edgesList.aracne.txt\"\n  write.table( edgesInfo.df, file = file.path(argOutDir, inferredEdgesFileName), col.names = TRUE, row.names = TRUE, quote = FALSE,sep = \"\\t\")\n\n  if(argVerbose){cat( \"# --------\\n# -> END aracne...\\n\" )}\n\n}\n",
    "created" : 1470647918936.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2913445934",
    "id" : "907092DC",
    "lastKnownWriteTime" : 1469541638,
    "path" : "~/Projects/Projects_largeScale/package/ScaleNet_V1.2/R/rMethod.aracne.R",
    "project_path" : "R/rMethod.aracne.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}